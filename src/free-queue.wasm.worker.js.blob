InVzZSBzdHJpY3QiO3ZhciBNb2R1bGU9e307aWYodHlwZW9mIHByb2Nlc3M9PT0ib2JqZWN0IiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnM9PT0ib2JqZWN0IiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZT09PSJzdHJpbmciKXt2YXIgbm9kZVdvcmtlclRocmVhZHM9cmVxdWlyZSgid29ya2VyX3RocmVhZHMiKTt2YXIgcGFyZW50UG9ydD1ub2RlV29ya2VyVGhyZWFkcy5wYXJlbnRQb3J0O3BhcmVudFBvcnQub24oIm1lc3NhZ2UiLGZ1bmN0aW9uKGRhdGEpe29ubWVzc2FnZSh7ZGF0YTpkYXRhfSl9KTt2YXIgbm9kZUZTPXJlcXVpcmUoImZzIik7T2JqZWN0LmFzc2lnbihnbG9iYWwse3NlbGY6Z2xvYmFsLHJlcXVpcmU6cmVxdWlyZSxNb2R1bGU6TW9kdWxlLGxvY2F0aW9uOntocmVmOl9fZmlsZW5hbWV9LFdvcmtlcjpub2RlV29ya2VyVGhyZWFkcy5Xb3JrZXIsaW1wb3J0U2NyaXB0czpmdW5jdGlvbihmKXsoMCxldmFsKShub2RlRlMucmVhZEZpbGVTeW5jKGYsInV0ZjgiKSl9LHBvc3RNZXNzYWdlOmZ1bmN0aW9uKG1zZyl7cGFyZW50UG9ydC5wb3N0TWVzc2FnZShtc2cpfSxwZXJmb3JtYW5jZTpnbG9iYWwucGVyZm9ybWFuY2V8fHtub3c6ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX19fSl9ZnVuY3Rpb24gdGhyZWFkUHJpbnRFcnIoKXt2YXIgdGV4dD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oIiAiKTtjb25zb2xlLmVycm9yKHRleHQpfWZ1bmN0aW9uIHRocmVhZEFsZXJ0KCl7dmFyIHRleHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKCIgIik7cG9zdE1lc3NhZ2Uoe2NtZDoiYWxlcnQiLHRleHQ6dGV4dCx0aHJlYWRJZDpNb2R1bGVbIl9wdGhyZWFkX3NlbGYiXSgpfSl9dmFyIGVycj10aHJlYWRQcmludEVycjtzZWxmLmFsZXJ0PXRocmVhZEFsZXJ0O01vZHVsZVsiaW5zdGFudGlhdGVXYXNtIl09ZnVuY3Rpb24oaW5mbyxyZWNlaXZlSW5zdGFuY2Upe3ZhciBpbnN0YW5jZT1uZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2UoTW9kdWxlWyJ3YXNtTW9kdWxlIl0saW5mbyk7cmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlKTtNb2R1bGVbIndhc21Nb2R1bGUiXT1udWxsO3JldHVybiBpbnN0YW5jZS5leHBvcnRzfTtzZWxmLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt0cnl7aWYoZS5kYXRhLmNtZD09PSJsb2FkIil7TW9kdWxlWyJ3YXNtTW9kdWxlIl09ZS5kYXRhLndhc21Nb2R1bGU7TW9kdWxlWyJ3YXNtTWVtb3J5Il09ZS5kYXRhLndhc21NZW1vcnk7TW9kdWxlWyJidWZmZXIiXT1Nb2R1bGVbIndhc21NZW1vcnkiXS5idWZmZXI7TW9kdWxlWyJFTlZJUk9OTUVOVF9JU19QVEhSRUFEIl09dHJ1ZTtpZih0eXBlb2YgZS5kYXRhLnVybE9yQmxvYj09PSJzdHJpbmciKXtpbXBvcnRTY3JpcHRzKGUuZGF0YS51cmxPckJsb2IpfWVsc2V7dmFyIG9iamVjdFVybD1VUkwuY3JlYXRlT2JqZWN0VVJMKGUuZGF0YS51cmxPckJsb2IpO2ltcG9ydFNjcmlwdHMob2JqZWN0VXJsKTtVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVybCl9fWVsc2UgaWYoZS5kYXRhLmNtZD09PSJydW4iKXtNb2R1bGVbIl9fcGVyZm9ybWFuY2Vfbm93X2Nsb2NrX2RyaWZ0Il09cGVyZm9ybWFuY2Uubm93KCktZS5kYXRhLnRpbWU7TW9kdWxlWyJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2luaXQiXShlLmRhdGEudGhyZWFkSW5mb1N0cnVjdCwwLDApO3ZhciBtYXg9ZS5kYXRhLnN0YWNrQmFzZTt2YXIgdG9wPWUuZGF0YS5zdGFja0Jhc2UrZS5kYXRhLnN0YWNrU2l6ZTtNb2R1bGVbImVzdGFibGlzaFN0YWNrU3BhY2UiXSh0b3AsbWF4KTtNb2R1bGVbIlBUaHJlYWQiXS5yZWNlaXZlT2JqZWN0VHJhbnNmZXIoZS5kYXRhKTtNb2R1bGVbIlBUaHJlYWQiXS50aHJlYWRJbml0KCk7dHJ5e3ZhciByZXN1bHQ9TW9kdWxlWyJpbnZva2VFbnRyeVBvaW50Il0oZS5kYXRhLnN0YXJ0X3JvdXRpbmUsZS5kYXRhLmFyZyk7aWYoTW9kdWxlWyJrZWVwUnVudGltZUFsaXZlIl0oKSl7TW9kdWxlWyJQVGhyZWFkIl0uc2V0RXhpdFN0YXR1cyhyZXN1bHQpfWVsc2V7TW9kdWxlWyJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXQiXShyZXN1bHQpfX1jYXRjaChleCl7aWYoZXghPSJ1bndpbmQiKXtpZihleCBpbnN0YW5jZW9mIE1vZHVsZVsiRXhpdFN0YXR1cyJdKXtpZihNb2R1bGVbImtlZXBSdW50aW1lQWxpdmUiXSgpKXt9ZWxzZXtNb2R1bGVbIl9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdCJdKGV4LnN0YXR1cyl9fWVsc2V7TW9kdWxlWyJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXQiXSgtMik7dGhyb3cgZXh9fX19ZWxzZSBpZihlLmRhdGEuY21kPT09ImNhbmNlbCIpe2lmKE1vZHVsZVsiX3B0aHJlYWRfc2VsZiJdKCkpe01vZHVsZVsiX19lbXNjcmlwdGVuX3RocmVhZF9leGl0Il0oLTEpfXBvc3RNZXNzYWdlKHsiY21kIjoiY2FuY2VsRG9uZSJ9KX1lbHNlIGlmKGUuZGF0YS50YXJnZXQ9PT0ic2V0aW1tZWRpYXRlIil7fWVsc2UgaWYoZS5kYXRhLmNtZD09PSJwcm9jZXNzVGhyZWFkUXVldWUiKXtpZihNb2R1bGVbIl9wdGhyZWFkX3NlbGYiXSgpKXtNb2R1bGVbIl9lbXNjcmlwdGVuX2N1cnJlbnRfdGhyZWFkX3Byb2Nlc3NfcXVldWVkX2NhbGxzIl0oKX19ZWxzZXtlcnIoIndvcmtlci5qcyByZWNlaXZlZCB1bmtub3duIGNvbW1hbmQgIitlLmRhdGEuY21kKTtlcnIoZS5kYXRhKX19Y2F0Y2goZXgpe2Vycigid29ya2VyLmpzIG9ubWVzc2FnZSgpIGNhcHR1cmVkIGFuIHVuY2F1Z2h0IGV4Y2VwdGlvbjogIitleCk7aWYoZXgmJmV4LnN0YWNrKWVycihleC5zdGFjayk7dGhyb3cgZXh9fTsNCg==InVzZSBzdHJpY3QiO3ZhciBNb2R1bGU9e307aWYodHlwZW9mIHByb2Nlc3M9PT0ib2JqZWN0IiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnM9PT0ib2JqZWN0IiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZT09PSJzdHJpbmciKXt2YXIgbm9kZVdvcmtlclRocmVhZHM9cmVxdWlyZSgid29ya2VyX3RocmVhZHMiKTt2YXIgcGFyZW50UG9ydD1ub2RlV29ya2VyVGhyZWFkcy5wYXJlbnRQb3J0O3BhcmVudFBvcnQub24oIm1lc3NhZ2UiLGZ1bmN0aW9uKGRhdGEpe29ubWVzc2FnZSh7ZGF0YTpkYXRhfSl9KTt2YXIgbm9kZUZTPXJlcXVpcmUoImZzIik7T2JqZWN0LmFzc2lnbihnbG9iYWwse3NlbGY6Z2xvYmFsLHJlcXVpcmU6cmVxdWlyZSxNb2R1bGU6TW9kdWxlLGxvY2F0aW9uOntocmVmOl9fZmlsZW5hbWV9LFdvcmtlcjpub2RlV29ya2VyVGhyZWFkcy5Xb3JrZXIsaW1wb3J0U2NyaXB0czpmdW5jdGlvbihmKXsoMCxldmFsKShub2RlRlMucmVhZEZpbGVTeW5jKGYsInV0ZjgiKSl9LHBvc3RNZXNzYWdlOmZ1bmN0aW9uKG1zZyl7cGFyZW50UG9ydC5wb3N0TWVzc2FnZShtc2cpfSxwZXJmb3JtYW5jZTpnbG9iYWwucGVyZm9ybWFuY2V8fHtub3c6ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX19fSl9ZnVuY3Rpb24gdGhyZWFkUHJpbnRFcnIoKXt2YXIgdGV4dD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oIiAiKTtjb25zb2xlLmVycm9yKHRleHQpfWZ1bmN0aW9uIHRocmVhZEFsZXJ0KCl7dmFyIHRleHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKCIgIik7cG9zdE1lc3NhZ2Uoe2NtZDoiYWxlcnQiLHRleHQ6dGV4dCx0aHJlYWRJZDpNb2R1bGVbIl9wdGhyZWFkX3NlbGYiXSgpfSl9dmFyIGVycj10aHJlYWRQcmludEVycjtzZWxmLmFsZXJ0PXRocmVhZEFsZXJ0O01vZHVsZVsiaW5zdGFudGlhdGVXYXNtIl09ZnVuY3Rpb24oaW5mbyxyZWNlaXZlSW5zdGFuY2Upe3ZhciBpbnN0YW5jZT1uZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2UoTW9kdWxlWyJ3YXNtTW9kdWxlIl0saW5mbyk7cmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlKTtNb2R1bGVbIndhc21Nb2R1bGUiXT1udWxsO3JldHVybiBpbnN0YW5jZS5leHBvcnRzfTtzZWxmLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt0cnl7aWYoZS5kYXRhLmNtZD09PSJsb2FkIil7TW9kdWxlWyJ3YXNtTW9kdWxlIl09ZS5kYXRhLndhc21Nb2R1bGU7TW9kdWxlWyJ3YXNtTWVtb3J5Il09ZS5kYXRhLndhc21NZW1vcnk7TW9kdWxlWyJidWZmZXIiXT1Nb2R1bGVbIndhc21NZW1vcnkiXS5idWZmZXI7TW9kdWxlWyJFTlZJUk9OTUVOVF9JU19QVEhSRUFEIl09dHJ1ZTtpZih0eXBlb2YgZS5kYXRhLnVybE9yQmxvYj09PSJzdHJpbmciKXtpbXBvcnRTY3JpcHRzKGUuZGF0YS51cmxPckJsb2IpfWVsc2V7dmFyIG9iamVjdFVybD1VUkwuY3JlYXRlT2JqZWN0VVJMKGUuZGF0YS51cmxPckJsb2IpO2ltcG9ydFNjcmlwdHMob2JqZWN0VXJsKTtVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVybCl9fWVsc2UgaWYoZS5kYXRhLmNtZD09PSJydW4iKXtNb2R1bGVbIl9fcGVyZm9ybWFuY2Vfbm93X2Nsb2NrX2RyaWZ0Il09cGVyZm9ybWFuY2Uubm93KCktZS5kYXRhLnRpbWU7TW9kdWxlWyJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2luaXQiXShlLmRhdGEudGhyZWFkSW5mb1N0cnVjdCwwLDApO3ZhciBtYXg9ZS5kYXRhLnN0YWNrQmFzZTt2YXIgdG9wPWUuZGF0YS5zdGFja0Jhc2UrZS5kYXRhLnN0YWNrU2l6ZTtNb2R1bGVbImVzdGFibGlzaFN0YWNrU3BhY2UiXSh0b3AsbWF4KTtNb2R1bGVbIlBUaHJlYWQiXS5yZWNlaXZlT2JqZWN0VHJhbnNmZXIoZS5kYXRhKTtNb2R1bGVbIlBUaHJlYWQiXS50aHJlYWRJbml0KCk7dHJ5e3ZhciByZXN1bHQ9TW9kdWxlWyJpbnZva2VFbnRyeVBvaW50Il0oZS5kYXRhLnN0YXJ0X3JvdXRpbmUsZS5kYXRhLmFyZyk7aWYoTW9kdWxlWyJrZWVwUnVudGltZUFsaXZlIl0oKSl7TW9kdWxlWyJQVGhyZWFkIl0uc2V0RXhpdFN0YXR1cyhyZXN1bHQpfWVsc2V7TW9kdWxlWyJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXQiXShyZXN1bHQpfX1jYXRjaChleCl7aWYoZXghPSJ1bndpbmQiKXtpZihleCBpbnN0YW5jZW9mIE1vZHVsZVsiRXhpdFN0YXR1cyJdKXtpZihNb2R1bGVbImtlZXBSdW50aW1lQWxpdmUiXSgpKXt9ZWxzZXtNb2R1bGVbIl9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdCJdKGV4LnN0YXR1cyl9fWVsc2V7TW9kdWxlWyJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXQiXSgtMik7dGhyb3cgZXh9fX19ZWxzZSBpZihlLmRhdGEuY21kPT09ImNhbmNlbCIpe2lmKE1vZHVsZVsiX3B0aHJlYWRfc2VsZiJdKCkpe01vZHVsZVsiX19lbXNjcmlwdGVuX3RocmVhZF9leGl0Il0oLTEpfXBvc3RNZXNzYWdlKHsiY21kIjoiY2FuY2VsRG9uZSJ9KX1lbHNlIGlmKGUuZGF0YS50YXJnZXQ9PT0ic2V0aW1tZWRpYXRlIil7fWVsc2UgaWYoZS5kYXRhLmNtZD09PSJwcm9jZXNzVGhyZWFkUXVldWUiKXtpZihNb2R1bGVbIl9wdGhyZWFkX3NlbGYiXSgpKXtNb2R1bGVbIl9lbXNjcmlwdGVuX2N1cnJlbnRfdGhyZWFkX3Byb2Nlc3NfcXVldWVkX2NhbGxzIl0oKX19ZWxzZXtlcnIoIndvcmtlci5qcyByZWNlaXZlZCB1bmtub3duIGNvbW1hbmQgIitlLmRhdGEuY21kKTtlcnIoZS5kYXRhKX19Y2F0Y2goZXgpe2Vycigid29ya2VyLmpzIG9ubWVzc2FnZSgpIGNhcHR1cmVkIGFuIHVuY2F1Z2h0IGV4Y2VwdGlvbjogIitleCk7aWYoZXgmJmV4LnN0YWNrKWVycihleC5zdGFjayk7dGhyb3cgZXh9fTsNCg==